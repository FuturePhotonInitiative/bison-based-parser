#ifndef PARSER_H
#define PARSER_H

enum command_codes {
    COMMAND_CFP_GPIO_READ,
    COMMAND_CFP_GPIO_SET,
    COMMAND_CFP_GPIO_CLEAR,
    COMMAND_CFP_GPIO_TOGGLE,
    COMMAND_CFP_GPIO_DEBUG,
    COMMAND_CFP_MDIO_READ,
    COMMAND_CFP_MDIO_WRITE,
    COMMAND_CFP_MDIO_DEBUG,
    COMMAND_QSFP_GPIO_READ,
    COMMAND_QSFP_GPIO_SET,
    COMMAND_QSFP_GPIO_CLEAR,
    COMMAND_QSFP_GPIO_TOGGLE,
    COMMAND_QSFP_GPIO_DEBUG,
    COMMAND_QSFP_IIC_READ,
    COMMAND_QSFP_IIC_DEBUG,
    COMMAND_QSFP_BERT,
    COMMAND_QSFP_EYESCAN,
    COMMAND_VCU108_GPIO_READ,
    COMMAND_VCU108_GPIO_SET,
    COMMAND_VCU108_GPIO_CLEAR,
    COMMAND_VCU108_GPIO_TOGGLE,
    COMMAND_VCU108_GPIO_DEBUG,
    COMMAND_PEK_GPIO_READ,
    COMMAND_PEK_GPIO_SET,
    COMMAND_PEK_GPIO_CLEAR,
    COMMAND_PEK_GPIO_TOGGLE,
    COMMAND_PEK_GPIO_DEBUG,
    COMMAND_PEK_IIC_READ,
    COMMAND_PEK_IIC_WRITE,
    COMMAND_PEK_IIC_DEBUG,
    COMMAND_PEK_BERT,
    COMMAND_PEK_EYESCAN,
    COMMAND_PEK_OPTOCOUPLER,
    COMMAND_INVALID = 255
};

enum error_codes {
    ERROR_INVALID_GPIO_PORT,
    ERROR_INVALID_GPIO_PIN,
    ERROR_INVALID_QSFP_IIC_READ_PAGE,
    ERROR_START_ADDR_NOT_LESS_THAN_END,
    ERROR_PEK_WRITE_DATA_TOO_LONG,
    ERROR_INVALID_PEK_IIC_WRITE_PAGE,
    ERROR_INVALID_PEK_GPIO_PORT,
    ERROR_INVALID_PEK_GPIO_PIN,
    ERROR_INVALID_PEK_IIC_READ_PAGE,
    ERROR_INVALID_CFP_PORT,
    ERROR_INVALID_CFP_MDIO_ADDRESS,
    ERROR_OTHER = 255
};

#include "parse_types.h"

command parseCommand(char* commandString);

#endif
